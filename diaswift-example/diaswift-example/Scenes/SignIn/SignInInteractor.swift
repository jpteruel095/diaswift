//
//  SignInInteractor.swift
//  diaswift-example
//
//  Created by John Patrick Teruel on 3/30/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignInBusinessLogic
{
  func doSomething(request: SignIn.Something.Request)
}

protocol SignInDataStore
{
  //var name: String { get set }
}

class SignInInteractor: SignInBusinessLogic, SignInDataStore
{
  var presenter: SignInPresentationLogic?
  var worker: SignInWorker?
  //var name: String = ""
  
  // MARK: Do something
  
  func doSomething(request: SignIn.Something.Request)
  {
    let username = request.username
    let password = request.password
    // you can assign on a variable for a "cleaner" code
    let endpoint = LoginEndpoint(username: username, password: password)
    
    /**
     You can also use it without assigning on a variable, e.g.
     LoginEndpoint(username: username, password: password).requestSingle { /// Code goes here /// }
     */
    endpoint.requestSingle { [self] (result) in
        switch result {
        case .success(let json):
            // check if the JSON is null or not
            // and check if token exists
            guard let token = json["token"].string else{
                let error = Helpers.makeError(with: "Request did not return any data.")
                let response = SignIn.Something.Response(error: error)
                presenter?.presentSomething(response: response)
                return
            }
            
            // store the token somewhere
            UserDefaults.standard.setValue(token, forKey: "accessToken")
            UserDefaults.standard.synchronize()
            
            let response = SignIn.Something.Response()
            presenter?.presentSomething(response: response)
        case .failure(let error):
            let response = SignIn.Something.Response(error: error)
            presenter?.presentSomething(response: response)
        }
    }
  }
}
